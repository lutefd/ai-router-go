// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/lutefd/ai-router-go/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAIRepositoryInterface is a mock of AIRepositoryInterface interface.
type MockAIRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAIRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockAIRepositoryInterfaceMockRecorder is the mock recorder for MockAIRepositoryInterface.
type MockAIRepositoryInterfaceMockRecorder struct {
	mock *MockAIRepositoryInterface
}

// NewMockAIRepositoryInterface creates a new mock instance.
func NewMockAIRepositoryInterface(ctrl *gomock.Controller) *MockAIRepositoryInterface {
	mock := &MockAIRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAIRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIRepositoryInterface) EXPECT() *MockAIRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GenerateContentStream mocks base method.
func (m *MockAIRepositoryInterface) GenerateContentStream(ctx context.Context, model, prompt string, callback func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateContentStream", ctx, model, prompt, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateContentStream indicates an expected call of GenerateContentStream.
func (mr *MockAIRepositoryInterfaceMockRecorder) GenerateContentStream(ctx, model, prompt, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContentStream", reflect.TypeOf((*MockAIRepositoryInterface)(nil).GenerateContentStream), ctx, model, prompt, callback)
}

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepositoryInterface) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).DeleteUser), ctx, userID)
}

// GetUser mocks base method.
func (m *MockUserRepositoryInterface) GetUser(ctx context.Context, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositoryInterface) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByEmail), ctx, email)
}

// GetUsersChatList mocks base method.
func (m *MockUserRepositoryInterface) GetUsersChatList(ctx context.Context, userID string) ([]*models.UserChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersChatList", ctx, userID)
	ret0, _ := ret[0].([]*models.UserChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersChatList indicates an expected call of GetUsersChatList.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsersChatList(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersChatList", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsersChatList), ctx, userID)
}

// ListUsers mocks base method.
func (m *MockUserRepositoryInterface) ListUsers(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserRepositoryInterfaceMockRecorder) ListUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserRepositoryInterface)(nil).ListUsers), ctx)
}

// UpdateUser mocks base method.
func (m *MockUserRepositoryInterface) UpdateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUser), ctx, user)
}

// MockChatRepositoryInterface is a mock of ChatRepositoryInterface interface.
type MockChatRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockChatRepositoryInterfaceMockRecorder is the mock recorder for MockChatRepositoryInterface.
type MockChatRepositoryInterfaceMockRecorder struct {
	mock *MockChatRepositoryInterface
}

// NewMockChatRepositoryInterface creates a new mock instance.
func NewMockChatRepositoryInterface(ctrl *gomock.Controller) *MockChatRepositoryInterface {
	mock := &MockChatRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepositoryInterface) EXPECT() *MockChatRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatRepositoryInterface) CreateChat(ctx context.Context, chat *models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) CreateChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).CreateChat), ctx, chat)
}

// DeleteChat mocks base method.
func (m *MockChatRepositoryInterface) DeleteChat(ctx context.Context, chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) DeleteChat(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).DeleteChat), ctx, chatID)
}

// GetChat mocks base method.
func (m *MockChatRepositoryInterface) GetChat(ctx context.Context, chatID string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chatID)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) GetChat(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).GetChat), ctx, chatID)
}

// UpdateChat mocks base method.
func (m *MockChatRepositoryInterface) UpdateChat(ctx context.Context, chat *models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) UpdateChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).UpdateChat), ctx, chat)
}
